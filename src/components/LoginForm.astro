<div id="error-message" class="hidden">
  <p>Credenciales Invalidas</p>
  <span id="attempts-left">Intentos restantes: 3</span>
</div>
<form id="login-form" method="POST">
  <div class="container">
    <h1>Login</h1>
    <div class="editor-field editor-field__textbox">
      <div class="editor-field__label-container">
        <label class="editor-field__label">Name</label>
      </div>

      <div class="editor-field__container">
        <input
          type="text"
          name="name"
          class="editor-field__input"
          autocomplete="off"
          required
        />
      </div>
      <span class="editor-field__bottom"></span>
      <div class="editor-field__noise"></div>
    </div>
    <div class="editor-field editor-field__textbox">
      <div class="editor-field__label-container">
        <label class="editor-field__label">Password</label>
      </div>

      <div class="editor-field__container">
        <input
          type="password"
          name="password"
          class="editor-field__input"
          required
        />
      </div>
      <span class="editor-field__bottom"></span>
      <div class="editor-field__noise"></div>
    </div>
    <div id="submit-btn" class="btn btn--primary submit-btn">
      <button type="submit" class="btn__container">Login</button>
      <div class="btn__bottom"></div>
      <div class="btn__noise"></div>
    </div>
  </div>
</form>

<script>
  import { actions } from "astro:actions";
  import { navigate } from "astro:transitions/client";

  // Not real world app. Simple solution
  let attemptsLeft = 4;
  const errorMessage = document.getElementById("error-message");
  const attemptsLeftElement = document.getElementById("attempts-left");

  const form = document.querySelector("form");

  form?.addEventListener("submit", async (event) => {
    event.preventDefault();
    console.log("Form submitted");
    const formData = new FormData(form);
    const result = await actions.user.login(formData);

    if (result?.data?.success) {
      navigate("/g-cursos");
    }

    if (result?.data?.success === false) {
      attemptsLeft -= 1;
      if (errorMessage) {
        errorMessage.classList.remove("hidden");
        if (attemptsLeftElement) {
          attemptsLeftElement.textContent = `Intentos restantes: ${attemptsLeft}`;
        }
      }

      if (attemptsLeft === 0) {
        navigate("/refresh");
      }
    }
  });

  const submitBtn = document.getElementById("submit-btn");
  console.log(submitBtn);
  submitBtn?.addEventListener("click", function () {
    form?.requestSubmit();
  });
</script>

<script>
  // Thanks https://codepen.io/bsepiolo/pen/rNVYvWy

  const inputs = document.querySelectorAll(".editor-field__input");

  const applyNoise = () => {
    inputs.forEach((input) => {
      generateNoise(input, "input");
    });
  };

  const removeNoiseFromInputs = () => {
    inputs.forEach((input) => {
      removeNoise(input, "input");
    });
  };

  document.addEventListener("DOMContentLoaded", () => {
    applyNoise();
  });

  document.addEventListener("visibilitychange", () => {
    if (document.visibilityState === "visible") {
      applyNoise();
    } else {
      removeNoiseFromInputs();
    }
  });

  // // Itera sobre cada uno de los elementos seleccionados
  // inputs.forEach((input) => {
  //   // Agrega un listener para el evento 'focus'
  //   input.addEventListener("focus", (event) => {
  //     console.log("Input focused:", event.target);
  //     // Aquí puedes ejecutar cualquier código que desees cuando el input reciba focus
  //     generateNoise(event.target, "input");
  //   });

  //   // Agrega un listener para el evento 'blur'
  //   input.addEventListener("blur", (event) => {
  //     console.log("Input lost focus:", event.target);
  //     // Aquí puedes ejecutar cualquier código que desees cuando el input pierda focus
  //     removeNoise(event.target, "input");
  //   });
  // });

  const buttons = document.querySelectorAll(".btn");

  buttons.forEach((button) => {
    button.addEventListener("mouseover", (event) => {
      generateNoise(event.target, "button");
    });

    button.addEventListener("mouseout", (event) => {
      removeNoise(event.target, "button");
    });
  });

  const removeNoise = (
    { offsetParent: { offsetParent }, lastElementChild }: any,
    type: string
  ) => {
    let inputNoise;

    if (type == "input") {
      inputNoise = offsetParent.lastElementChild;
      offsetParent.classList.remove("is-focused");
    } else {
      inputNoise = lastElementChild;
    }

    inputNoise.removeChild(inputNoise.childNodes[0]);
  };

  const createSvg = (config: {
    noiseWidth: any;
    svgGroupX: any;
    rectY: any;
    svgGroupY: any;
    id: any;
    inputWidth?: any;
    noiseHeight: any;
    rectX: any;
    rectBorderX: any;
    rectBorderY: any;
    noiseColor?: string;
    maxNoiseWidth?: number;
    minNoiseWidth?: number;
  }) => {
    let svgGroup = document.createElementNS(
      "http://www.w3.org/2000/svg",
      "svg"
    );
    svgGroup.setAttribute("x", config.svgGroupX);
    svgGroup.setAttribute("y", config.svgGroupY);

    let rect = document.createElementNS("http://www.w3.org/2000/svg", "rect");
    rect.setAttribute("x", config.rectX);
    rect.setAttribute("y", config.rectY);
    rect.setAttribute("width", config.noiseWidth);
    rect.setAttribute("height", config.noiseHeight);
    rect.setAttribute("class", "noise__el");
    svgGroup.appendChild(rect);

    let rectOnBorder = document.createElementNS(
      "http://www.w3.org/2000/svg",
      "rect"
    );
    rectOnBorder.setAttribute("x", config.rectBorderX);
    rectOnBorder.setAttribute("y", config.rectBorderY);
    rectOnBorder.setAttribute("width", config.noiseWidth);
    rectOnBorder.setAttribute("height", config.noiseHeight);
    rectOnBorder.setAttribute("fill", "rgb(15, 16, 32)");
    svgGroup.appendChild(rectOnBorder);

    let animate = document.createElementNS(
      "http://www.w3.org/2000/svg",
      "animate"
    );
    animate.setAttribute("attributeType", "CSS");
    animate.setAttribute("attributeName", "opacity");
    animate.setAttribute("id", config.id);
    animate.setAttribute("from", "0");
    animate.setAttribute("to", "1");
    animate.setAttribute("dur", `${Math.random() + 0.1}s`);
    animate.setAttribute("repeatCount", "indefinite");
    animate.setAttribute(
      "begin",
      `${Math.random() + 0.1}s;${config.id}.end+${Math.random() + 0.1}s`
    );
    svgGroup.appendChild(animate);
    return svgGroup;
  };

  const generateNoise = (e: any, type: string) => {
    const svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");

    let input, inputNoise, noiseColor;

    if (type == "input") {
      input = e.offsetParent;
      e.parentElement.parentElement.classList.add("is-focused");
      inputNoise = e.parentElement.parentElement.lastElementChild;
      noiseColor = "rgb(112, 113, 156)";
    } else {
      input = e;
      inputNoise = e.lastElementChild;
      noiseColor = "rgb(73, 77, 195)";
    }

    let inputHeight = input.offsetHeight;
    let inputWidth = input.offsetWidth;

    svg.setAttribute("width", "300");
    svg.setAttribute("height", "66");

    let maxNumberOfHorizontalNoise = Math.round(inputWidth / inputHeight);
    let maxNumberOfVerticalNoise = Math.round(inputHeight / 10 / 2);

    let verticalNoiseToGenerateBottom = Math.floor(
      Math.random() * (maxNumberOfHorizontalNoise - 1) + 1
    );

    let commonVerticalConfig = {
      inputWidth,
      noiseHeight: 2,
      rectX: "4",
      rectBorderX: "4",
      rectBorderY: "14",
      noiseColor,
    };

    let commonHorizontalConfig = {
      inputWidth,
      maxNoiseWidth: 8,
      minNoiseWidth: 2,
      noiseWidth: 2,
      rectBorderY: 14,
      noiseColor,
    };

    for (let i = 0; i <= verticalNoiseToGenerateBottom; i++) {
      svg.appendChild(
        createSvg({
          ...commonVerticalConfig,
          noiseWidth: Math.floor(Math.random() * (16 - 4) + 4),
          svgGroupX: Math.floor(Math.random() * (inputWidth - 1) + 1),
          rectY: Math.floor(Math.random() * (16 - 8) + 8),
          svgGroupY: 46,
          id: `bottom${i}`,
        })
      );
    }

    let verticalNoiseToGenerateTop = Math.floor(
      Math.random() * (maxNumberOfHorizontalNoise - 1) + 1
    );

    for (let i = 0; i <= verticalNoiseToGenerateTop; i++) {
      svg.appendChild(
        createSvg({
          ...commonVerticalConfig,
          noiseWidth: Math.floor(Math.random() * (16 - 4) + 4),
          svgGroupX: Math.floor(Math.random() * (inputWidth - 1) + 1),
          rectY: Math.floor(Math.random() * (20 - 8) + 8),
          svgGroupY: 0,
          id: `top${i}`,
        })
      );
    }

    for (let i = 0; i <= maxNumberOfVerticalNoise; i++) {
      svg.appendChild(
        createSvg({
          ...commonHorizontalConfig,
          noiseHeight: Math.floor(Math.random() * (8 - 2) + 2),
          rectX: "2",
          rectY: Math.floor(Math.random() * (20 - 12) + 12),
          svgGroupX: 0,
          svgGroupY: Math.floor(Math.random() * (20 - 1) + 1),
          id: `left${i}`,
          rectBorderX: 0,
        })
      );
    }

    for (let i = 0; i <= maxNumberOfVerticalNoise; i++) {
      svg.appendChild(
        createSvg({
          ...commonHorizontalConfig,
          noiseHeight: Math.floor(Math.random() * (8 - 2) + 2),
          rectX: "0",
          rectY: Math.floor(Math.random() * (20 - 12) + 12),
          svgGroupX: inputWidth - 4,
          svgGroupY: Math.floor(Math.random() * (20 - 5) + 5),
          id: `right${i}`,
          rectBorderX: 2,
        })
      );
    }

    inputNoise.appendChild(svg);
  };
</script>

<style lang="scss">
  $black: #0f1020;
  $blackLight: #151830;
  //grays
  $gray-900: #5e5f84;
  $gray-600: #70719c;
  $gray-300: #7f83a2;

  //white
  $white: #b3b5d2;

  $blue: #383cab;
  $green: #249163;
  $red: #bf2e50;
  $yellow: #a4852f;

  //sizing

  $space-size: 8px;
  $space-size-2: $space-size * 2;
  $space-size-3: $space-size * 3;
  $space-size-4: $space-size * 4;
  $space-size-5: $space-size * 5;
  $space-size-6: $space-size * 6;
  $space-size-7: $space-size * 7;
  $space-size-8: $space-size * 8;

  h1 {
    font-size: 24px;
    flex-grow: 1;
    flex-shrink: 1;
    display: flex;
    width: 100%;
    padding: 0px 0 20px 0;
  }

  .container {
    width: 300px;
    margin: auto;
    display: flex;
    flex-direction: column;
    align-items: flex-end;
  }
  .editor-field {
    width: 300px;
    height: 64px; //$space-size-6;
    position: relative;
    margin: $space-size-2 - 2 0;
    .noise__el {
      fill: $gray-600;
    }
    &__noise {
      position: absolute;
      bottom: -2px;
      width: 100%;
      height: calc(100% + 2px);
      z-index: 2;
      pointer-events: none;
    }
    &__container {
      clip-path: polygon(
        0% 0%,
        calc(100% - 8px) 0,
        100% 8px,
        100% 100%,
        95% 100%,
        calc(0% + 8px) 100%,
        0% calc(100% - 8px),
        0% calc(100% + 8px)
      );
      border: 2px solid $gray-900;
      width: 100%;
      height: $space-size-6;
      position: absolute;
      bottom: 2px;
      &:before,
      &:after {
        content: "";
        height: 2px;
        width: 11.5px;
        background: $gray-900;
        display: block;
        position: absolute;
        z-index: 1;
        -webkit-transform: rotate(45deg);
        transform: rotate(45deg);
        border-radius: 5px;
      }
      &:before {
        right: -3.1px;
        top: 1.6px;
      }
      &:after {
        left: -3.1px;
        bottom: 1.6px;
      }
    }

    &__bottom {
      position: absolute;
      content: "";
      display: block;
      height: calc($space-size / 4);
      width: 30%;
      background: $gray-900;
      right: 0px;
      clip-path: polygon(0 0, 100% 0%, 100% 100%, calc(0% + 2px) 100%);
      bottom: 0px;
    }

    &__label-container {
      position: absolute;
      top: 0px;
      &:after {
        position: absolute;
        content: "";
        display: block;
        height: 2px;
        width: 32px;
        background: $gray-900;
        right: -29px;
        -webkit-clip-path: polygon(
          0 0,
          calc(100% - 2px) 0%,
          100% 100%,
          22% 100%
        );
        clip-path: polygon(0 0, calc(100% - 2px) 0%, 100% 100%, 0% 100%);
        bottom: 2px;
      }
    }
    &__label {
      position: relative;
      display: block;
      height: $space-size-2;
      width: auto;
      background: $gray-900;
      left: 0px;
      color: $black;
      font-size: 9px;
      text-transform: uppercase;
      letter-spacing: 1.25px;
      font-weight: 600;
      padding: 0 $space-size-3 0 $space-size-2;
      display: flex;
      align-items: center;
      clip-path: polygon(0 0, calc(100% - 10px) 0, 100% 100%, 0% 100%);
    }
    &__input {
      width: 100%;
      height: 100%;
      border: none;
      outline: none;
      background: $black;
      color: $white;
      padding: $space-size $space-size-2;
      letter-spacing: 0.2px;
      &:focus {
        animation: 0.05s infinite alternate blink;

        @keyframes blink {
          from {
            background: $black;
          }
          to {
            background: lighten($black, 1%);
          }
        }
      }
    }
    $parent: &;
    &:hover,
    &.is-focused {
      #{$parent}__bottom {
        background: $gray-600;
      }
      #{$parent}__container {
        border-color: $gray-600;
        &:after,
        &:before {
          background: $gray-600 !important;
        }
      }
      #{$parent}__label-container {
        &:after {
          background: $gray-600;
        }
      }
      #{$parent}__label,
      #{$parent}__helper {
        background: $gray-600;
      }
    }
  }

  .btn {
    display: inline-block;
    position: relative;
    height: $space-size-7 - 6;
    margin-top: $space-size-4;
    cursor: pointer;
    &__noise {
      position: absolute;
      top: -28%;
      height: 66px;
      width: 100%;
      pointer-events: none;
    }
    &--primary {
      .btn__container {
        background: $blue;
        border-color: lighten($blue, 10%);
        display: flex;
        align-items: center;
        line-height: 10px;
        pointer-events: none;
        color: lighten($blue, 47%);
      }
      .noise__el {
        fill: lighten($blue, 10%);
      }
      &:hover {
        .btn__container {
          background: darken($blue, 3%);
          border-color: lighten($blue, 8%);
        }
        .btn__bottom {
          background: darken($blue, 3%);
          border-color: lighten($blue, 8%);
        }
      }
      &:active {
        .btn__container {
          background: darken($blue, 8%);
          border-color: lighten($blue, 2%);
          color: lighten($blue, 40%);
        }
        .btn__bottom {
          background: darken($blue, 8%);
          border-color: lighten($blue, 2%);
        }
      }
    }
    &:before,
    &:after {
      content: "";
      height: 2px;
      width: 11px;
      background: lighten($blue, 10%);
      display: block;
      position: absolute;
      z-index: 1;
      -webkit-transform: rotate(45deg);
      transform: rotate(45deg);
      border-radius: 2px;
      border-radius: 2px;
    }
    &:before {
      right: -1.07px;
      top: 4px;
    }
    &:after {
      left: -1.07px;
      bottom: 6px;
    }
    &__bottom {
      position: absolute;
      content: "";
      display: block;
      height: calc($space-size / 2);
      width: 50%;
      background: $blue;
      pointer-events: none;
      right: 0px;
      bottom: 0px;
      clip-path: polygon(0 0, 100% 0%, 100% 100%, calc(0% + 4px) 100%);
      border-bottom: 2px solid lighten($blue, 10%);
      border-right: 2px solid lighten($blue, 10%);
      &:before {
        content: "";
        height: 2px;
        width: 11px;
        background: lighten($blue, 10%);
        display: block;
        position: absolute;
        left: -5px;
        bottom: 2px;
        z-index: 1;
        -webkit-transform: rotate(45deg);
        transform: rotate(45deg);
      }
    }
    &__container {
      height: 100%;
      background: none;
      border: none;
      color: white;
      padding: 0 $space-size-3;
      height: $space-size-6;
      border: 2px solid;
      clip-path: polygon(
        0% 0%,
        calc(100% - 8px) 0,
        100% 8px,
        100% 100%,
        95% 100%,
        calc(0% + 8px) 100%,
        0% calc(100% - 8px),
        0% 20%
      );
    }
  }
</style>
